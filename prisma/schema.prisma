// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String                 @id @default(uuid())
  email             String                 @unique
  username          String                 @unique
  password          String
  firstName         String
  lastName          String
  role              UserRole               @default(USER)
  
  // Subscription info
  subscriptionStatus SubscriptionStatus    @default(INACTIVE)
  subscriptionStart DateTime?
  subscriptionEnd   DateTime?
  documentsAccessed Int                    @default(0)
  annotationsCreated Int                   @default(0)
  
  // Relationships
  subscriptions     Subscription[]
  categoryProgress  UserCategoryProgress[]
  
  createdAt         DateTime               @default(now())
  updatedAt         DateTime               @updatedAt
  isActive          Boolean                @default(true)
  
  @@map("users")
}

model Category {
  id              String                 @id @default(uuid())
  name            String
  description     String?
  displayOrder    Int                    @default(0)
  totalStages     Int                    @default(0)
  totalDocuments  Int                    @default(0)
  imagePath       String?
  
  // Relationships
  userProgress    UserCategoryProgress[]
  stages          Stage[]
  
  createdAt       DateTime               @default(now())
  updatedAt       DateTime               @updatedAt
  isActive        Boolean                @default(true)
  
  @@map("categories")
}

model Stage {
  id              String    @id @default(uuid())
  name            String
  description     String?
  categoryId      String
  category        Category  @relation(fields: [categoryId], references: [id])
  stageNumber     Int
  displayOrder    Int       @default(0)
  isRequired      Boolean   @default(false)
  estimatedDuration Int?    // in minutes
  
  // Requirements
  requirements    Json?     // flexible JSON for different requirement types
  minimumScore    Float?
  prerequisiteStages String[] @default([])
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  isActive        Boolean   @default(true)
  
  @@unique([categoryId, stageNumber])
  @@map("stages")
}

model Document {
  id              String     @id @default(uuid())
  title           String
  description     String?
  fileName        String
  filePath        String
  fileSize        BigInt
  fileType        String
  categoryId      String?
  stageId         String?
  
  // Processing status
  processingStatus ProcessingStatus @default(PENDING)
  textContent     String?
  
  // Relationships
  annotations     Annotation[]
  
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  isActive        Boolean    @default(true)
  
  @@map("documents")
}

model Annotation {
  id              String     @id @default(uuid())
  documentId      String
  document        Document   @relation(fields: [documentId], references: [id])
  userId          String
  
  // Annotation content
  content         String
  type            AnnotationType
  coordinates     Json?      // Store position data
  tags            String[]   @default([])
  
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  isActive        Boolean    @default(true)
  
  @@map("annotations")
}

model UserCategoryProgress {
  id                String     @id @default(uuid())
  userId            String
  user              User       @relation(fields: [userId], references: [id])
  categoryId        String
  category          Category   @relation(fields: [categoryId], references: [id])
  
  currentStage      Int        @default(1)
  completedStages   Int[]      @default([])
  documentsViewed   Int        @default(0)
  annotationsCount  Int        @default(0)
  totalTimeSpent    Int        @default(0) // in minutes
  lastAccessedAt    DateTime   @default(now())
  
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
  
  @@unique([userId, categoryId])
  @@map("user_category_progress")
}

model Subscription {
  id                String              @id @default(uuid())
  userId            String
  user              User                @relation(fields: [userId], references: [id])
  
  plan              SubscriptionPlan
  status            SubscriptionStatus
  startDate         DateTime
  endDate           DateTime?
  
  // Payment info
  paymentReference  String?
  amount            Float
  currency          String              @default("USD")
  
  // Features based on plan
  features          Json                // Store plan features as JSON
  
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  
  @@map("subscriptions")
}

// Enums
enum UserRole {
  USER
  ADMIN  
  SUPER_ADMIN
}

enum SubscriptionPlan {
  FREE
  BASIC
  PREMIUM
  ENTERPRISE
}

enum SubscriptionStatus {
  ACTIVE
  INACTIVE
  CANCELLED
  EXPIRED
  PENDING
}

enum ProcessingStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

enum AnnotationType {
  HIGHLIGHT
  NOTE
  BOOKMARK
  QUESTION
  IMPORTANT
}